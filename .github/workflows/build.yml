name: Deploy to EKS

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME}}
  AWS_REGION: ${{ vars.AWS_REGION}}

jobs:
  docker_images:
    name: docker_images
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build UI image and push to DockerHub
      - name: Build and push UI
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          file: ./ui/Dockerfile
          push: true
          tags: |
            kholha/ui-app:latest
            kholha/ui-app:1.0.0

      # Build API image WITHOUT CACHE and push to DockerHub
#      - name: Build and push API
#        uses: docker/build-push-action@v6
#        with:
#          platforms: linux/amd64,linux/arm64
#          context: "{{defaultContext}}:api"
#          push: true
#          tags: |
#            kholha/api-app:latest
#            kholha/api-app:1.0.0

  eks_deploy:
    name: eks_deploy
    runs-on: ubuntu-latest
    needs: docker_images
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy DB & API to EKS
        run: |
          kubectl apply -f /namespace.yml
          kubectl apply -f /postgresql_manifest.yml
          kubectl apply -f /postgresql_service_cluster_ip.yml
          kubectl apply -f /api_manifest.yml
          kubectl apply -f /api_service_loadbalancer.yml

      - name: Deploy UI
        run: |
          BACKEND_HOSTNAME=$(kubectl -n olha-namespace get svc backend-lb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          sed -i "s@\"API_URL\":.*@\"API_URL\": \"$BACKEND_HOSTNAME/\"@" /config_map.yml
          kubectl apply -f /config_map.yml
          kubectl apply -f /ui_manifest.yml
          kubectl apply -f /ui_service_loadbalancer.yml